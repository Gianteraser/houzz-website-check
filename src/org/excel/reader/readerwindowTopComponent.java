/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.excel.reader;

import com.sun.media.sound.DLSModulator;
import java.awt.event.ActionEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import javafx.scene.control.ComboBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;
import org.jdesktop.swingx.decorator.Highlighter;
import org.jsoup.Jsoup;
import org.netbeans.api.progress.ProgressHandle;
import org.netbeans.api.progress.ProgressHandleFactory;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Exceptions;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//org.excel.reader//readerwindow//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "readerwindowTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "editor", openAtStartup = true)
@ActionID(category = "Window", id = "org.excel.reader.readerwindowTopComponent")
@ActionReference(path = "Menu/Window" , position = 2 )
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_readerwindowAction",
        preferredID = "readerwindowTopComponent"
)
@Messages({
    "CTL_readerwindowAction=readerwindow",
    "CTL_readerwindowTopComponent=readerwindow Window",
    "HINT_readerwindowTopComponent=This is a readerwindow window"
})
public final class readerwindowTopComponent extends TopComponent
{
    DefaultTableModel model;
    private ExcelReader header;
    List<ExcelData> mainData = DataManager.getInstance().getExcelData();
     
    
    public readerwindowTopComponent()
    {   
        initComponents();
        setName(Bundle.CTL_readerwindowTopComponent());
        setToolTipText(Bundle.HINT_readerwindowTopComponent());
        header = new ExcelReader();
        String[] head = header.getTableColumns();
        Object headers[] = {head[0],head[1],head[2],head[3],head[4],head[5],
               head[6],head[7],head[8],head[9],head[10],head[11], head[12], head[13]};
        model = new DefaultTableModel(headers,0);
        model.addColumn("Notes");
        jXTable1.setModel(model);
        
        jXTable1.addHighlighter(Highlighers.getInstance().IsValidHighlight());
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        AddMultipleTermsFrame = new javax.swing.JFrame();
        AddTerm = new javax.swing.JButton();
        DeleteAll = new javax.swing.JButton();
        Close = new javax.swing.JButton();
        currentWordsLabel = new javax.swing.JLabel();
        MostImportantTermLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        FullScan = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jXTable1 = new org.jdesktop.swingx.JXTable();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        EnterCSVButton = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        HouzzCheck = new javax.swing.JButton();

        AddMultipleTermsFrame.setBounds(new java.awt.Rectangle(800, 400, 500, 250));
        AddMultipleTermsFrame.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        org.openide.awt.Mnemonics.setLocalizedText(AddTerm, org.openide.util.NbBundle.getMessage(readerwindowTopComponent.class, "readerwindowTopComponent.AddTerm.text")); // NOI18N
        AddTerm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddTermActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(DeleteAll, org.openide.util.NbBundle.getMessage(readerwindowTopComponent.class, "readerwindowTopComponent.DeleteAll.text")); // NOI18N
        DeleteAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteAllActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(Close, org.openide.util.NbBundle.getMessage(readerwindowTopComponent.class, "readerwindowTopComponent.Close.text")); // NOI18N
        Close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CloseActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(currentWordsLabel, org.openide.util.NbBundle.getMessage(readerwindowTopComponent.class, "readerwindowTopComponent.currentWordsLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(MostImportantTermLabel, org.openide.util.NbBundle.getMessage(readerwindowTopComponent.class, "readerwindowTopComponent.MostImportantTermLabel.text")); // NOI18N

        jTextArea1.setBackground(AddMultipleTermsFrame.getBackground());
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setText(org.openide.util.NbBundle.getMessage(readerwindowTopComponent.class, "readerwindowTopComponent.jTextArea1.text")); // NOI18N
        jTextArea1.setBorder(null);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout AddMultipleTermsFrameLayout = new javax.swing.GroupLayout(AddMultipleTermsFrame.getContentPane());
        AddMultipleTermsFrame.getContentPane().setLayout(AddMultipleTermsFrameLayout);
        AddMultipleTermsFrameLayout.setHorizontalGroup(
            AddMultipleTermsFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AddMultipleTermsFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(AddMultipleTermsFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(AddMultipleTermsFrameLayout.createSequentialGroup()
                        .addGroup(AddMultipleTermsFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(currentWordsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(MostImportantTermLabel))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AddMultipleTermsFrameLayout.createSequentialGroup()
                        .addGroup(AddMultipleTermsFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(AddMultipleTermsFrameLayout.createSequentialGroup()
                                .addComponent(AddTerm)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(DeleteAll)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(Close))
                            .addGroup(AddMultipleTermsFrameLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 546, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(64, 64, 64))))
        );
        AddMultipleTermsFrameLayout.setVerticalGroup(
            AddMultipleTermsFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AddMultipleTermsFrameLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(MostImportantTermLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(currentWordsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(AddMultipleTermsFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AddTerm)
                    .addComponent(DeleteAll)
                    .addComponent(Close))
                .addGap(22, 22, 22))
        );

        org.openide.awt.Mnemonics.setLocalizedText(FullScan, org.openide.util.NbBundle.getMessage(readerwindowTopComponent.class, "readerwindowTopComponent.FullScan.text")); // NOI18N
        FullScan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FullScanActionPerformed(evt);
            }
        });

        jXTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jXTable1);

        org.openide.awt.Mnemonics.setLocalizedText(jButton2, org.openide.util.NbBundle.getMessage(readerwindowTopComponent.class, "readerwindowTopComponent.jButton2.text")); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jButton3, org.openide.util.NbBundle.getMessage(readerwindowTopComponent.class, "readerwindowTopComponent.jButton3.text")); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jButton4, org.openide.util.NbBundle.getMessage(readerwindowTopComponent.class, "readerwindowTopComponent.jButton4.text")); // NOI18N
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(EnterCSVButton, org.openide.util.NbBundle.getMessage(readerwindowTopComponent.class, "readerwindowTopComponent.EnterCSVButton.text")); // NOI18N
        EnterCSVButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EnterCSVButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jButton5, org.openide.util.NbBundle.getMessage(readerwindowTopComponent.class, "readerwindowTopComponent.jButton5.text")); // NOI18N
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(HouzzCheck, org.openide.util.NbBundle.getMessage(readerwindowTopComponent.class, "readerwindowTopComponent.HouzzCheck.text")); // NOI18N
        HouzzCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HouzzCheckActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(EnterCSVButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(HouzzCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 75, Short.MAX_VALUE)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(FullScan)
                        .addGap(65, 65, 65)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FullScan)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton4)
                    .addComponent(EnterCSVButton)
                    .addComponent(jButton5)
                    .addComponent(HouzzCheck))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 553, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void FullScanActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_FullScanActionPerformed
    {//GEN-HEADEREND:event_FullScanActionPerformed
        
        new Thread(new Runnable()
        {

            @Override
            public void run()
            {                
                doBackground();
            }
        }).start();
        ButtonListener listener = new ButtonListener(){

            @Override
            public void buttonPressed()
            {
                populateTable();
            }
            
        };
        DataManager.getInstance().addButtonListener(listener);
       
        
    }//GEN-LAST:event_FullScanActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton2ActionPerformed
    {//GEN-HEADEREND:event_jButton2ActionPerformed
        try {
            ExcelReader.getCSV();
        } catch (FileNotFoundException ex) {
            Exceptions.printStackTrace(ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton3ActionPerformed
    {//GEN-HEADEREND:event_jButton3ActionPerformed
        new Thread(new Runnable()
        {

            @Override
            public void run()
            {
                DoBackgroundquick();
            }
        }).start();
        
                ButtonListener listener = new ButtonListener(){

            @Override
            public void buttonPressed()
            {
                populateTable();
            }
            
        };
        DataManager.getInstance().addButtonListener(listener);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton4ActionPerformed
    {//GEN-HEADEREND:event_jButton4ActionPerformed
        BasicConnection con = new BasicConnection();
        con.connectTo();

        con.addValidWebistes();

        
    }//GEN-LAST:event_jButton4ActionPerformed

    private void EnterCSVButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EnterCSVButtonActionPerformed
        String CSV_location;
        JFileChooser filechooser = new JFileChooser();
        filechooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        int result = filechooser.showOpenDialog(this);
        
        if (result == JFileChooser.APPROVE_OPTION){
            CSV_location = filechooser.getSelectedFile().toString();
            DataManager.getInstance().setCSV_location(CSV_location);
            
        // adds exceldata to datamanager
        URLChecking urlcheck = new URLChecking();
        urlcheck.LoadExcelData();
            
            
        }
    }//GEN-LAST:event_EnterCSVButtonActionPerformed

    private void DeleteAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteAllActionPerformed
       DataManager data = DataManager.getInstance();
       
       data.getKeyTerms().clear();
       
       
        currentWordsLabel.setText("Current Terms: " + data.KeyTermsToString());
        MostImportantTermLabel.setText("Most Important Term: ");
    }//GEN-LAST:event_DeleteAllActionPerformed

    private void AddTermActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddTermActionPerformed
        DataManager data = DataManager.getInstance();

        String word = JOptionPane.showInputDialog("Enter KeyTerm");
        data.getKeyTerms().add(word);
     
        MostImportantTermLabel.setText("Most Important Term: " + data.getKeyTerms().get(0));
        currentWordsLabel.setText("Current Terms: " + data.KeyTermsToString());
    }//GEN-LAST:event_AddTermActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        DataManager data = DataManager.getInstance();

        currentWordsLabel.setText("Current Terms: " + data.KeyTermsToString());
        try {
            MostImportantTermLabel.setText("Most Important Term: " + data.getKeyTerms().get(0));            
        } catch (IndexOutOfBoundsException ex){
            MostImportantTermLabel.setText("Most Important Term: ");
        }

        AddMultipleTermsFrame.setVisible(true);
        
        
        
    }//GEN-LAST:event_jButton5ActionPerformed

    private void CloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CloseActionPerformed
        AddMultipleTermsFrame.dispose();
    }//GEN-LAST:event_CloseActionPerformed

    private void HouzzCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HouzzCheckActionPerformed
        new Thread(new Runnable() {

            @Override
            public void run() {
                URLChecking check = new URLChecking();
                check.StandAloneConnectHouzz();

            }
        }).start();
        
        ButtonListener buttonListener = new ButtonListener() {

            @Override
            public void buttonPressed() {
                populateTable();
            }
        };
        DataManager.getInstance().addButtonListener(buttonListener);
        
    }//GEN-LAST:event_HouzzCheckActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFrame AddMultipleTermsFrame;
    private javax.swing.JButton AddTerm;
    private javax.swing.JButton Close;
    private javax.swing.JButton DeleteAll;
    private javax.swing.JButton EnterCSVButton;
    private javax.swing.JButton FullScan;
    private javax.swing.JButton HouzzCheck;
    private javax.swing.JLabel MostImportantTermLabel;
    private javax.swing.JLabel currentWordsLabel;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private org.jdesktop.swingx.JXTable jXTable1;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened()
    {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed()
    {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p)
    {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p)
    {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
    
    public void doBackground(){
        /*List<ExcelData> data = reader.ReadExcel();// TODO add your handling code here:
        populateTable(data);*/
//        validateData(); 
        URLChecking urlchecking = new URLChecking();
        
        urlchecking.FullCheck();
        
    }
    
    public void DoBackgroundquick(){
        quickValidation();
    }
    
    public void quickValidation(){
        URLChecking ex = new URLChecking();
        DataManager dM = DataManager.getInstance();
        
        List<ExcelData> fileData = null;    
        try {
            header.ReadExcel(DataManager.getInstance().getCSV_location());
            fileData = DataManager.getInstance().getExcelData();
        } catch (IOException ex1) {
            Exceptions.printStackTrace(ex1);
        }
        ProgressHandle prog = ProgressHandleFactory.createHandle("Validating websites...");
        prog.start(fileData.size());
        int count = 0;
 
        for (ExcelData data : fileData) {
            // correct any websites that do not have http or https
            if (data.getWebsite() != null || !data.getWebsite().trim().equals("")) {
                if (!data.getWebsite().contains("http://") && !data.getWebsite().contains("https://")) {
                    String website = "http://" + data.getWebsite();
                    data.setWebsite(website);
                }
                data.setValid(ex.IterateKeyTerms(data.getWebsite()));
            } else {
                data.setValid(false);
            }
            prog.progress(count++);

        }


        prog.finish();

        SwingUtilities.invokeLater(new Runnable()
        {

            @Override
            public void run()
            {
                DataManager.getInstance().firesEvent();
            }
        });
    }
    
    void validateData()
    {
        URLChecking ex = new URLChecking();

//        List<ExcelData> fileData = null;
//        try {
//            header.ReadExcel(DataManager.getInstance().getCSV_location());
//            fileData = DataManager.getInstance().getExcelData();
//        } catch (IOException ex1) {
//            Exceptions.printStackTrace(ex1);
//        }
        List<ExcelData> fileData = ex.LoadExcelData();
        ProgressHandle prog = ProgressHandleFactory.createHandle("Validating websites...");

        // progress bar
        prog.start(fileData.size());
        int count = 0;

        // start search
        for (ExcelData data : fileData) {
            // correct any websites that do not have http or https
            if (data.getWebsite() != null || !data.getWebsite().trim().equals("")) {
                if (!data.getWebsite().contains("http://") && !data.getWebsite().contains("https://")) {
                    String website = "http://" + data.getWebsite();
                    data.setWebsite(website);
                }
                data.setValid(ex.Iterate2LayerSearch(data.getWebsite()));
                data.setNotes("Ends at Layer2Search");
            }
            // not sure if this is necessary if debugger never hits her remove statement
                else {
                    data.setValid(false);
                    data.setNotes("Layer 2 Search: False");
                }

            prog.progress(count++);
        }

//        // second check on houzz
//        for (ExcelData second : fileData) {
//            if (second.getValid() == true) {             // only checks valid websites
//                if (!ex.connectToHouzz(second)) {           // if on houzz website, not true
//                    second.setValid(false);
//                    second.setNotes("On Houzz");
//                }
//                if (second.getValid() == false) {
//                    ex.connectPro2URL(second);
//                }
//            }
//            prog.progress(count++);
//        }

        prog.finish();
        SwingUtilities.invokeLater(new Runnable()
        {

            @Override
            public void run()
            {
                DataManager.getInstance().firesEvent();
            }
        });
    }

    public void populateTable(){
        List<ExcelData> fileData = DataManager.getInstance().getExcelData();
        for(int i = 0; i < fileData.size(); i++)
            {
               
                // creating object array to hold categories
                Object[] data = new Object[model.getColumnCount()];
                data[0] = fileData.get(i).getSalesMetro();
                data[1] = fileData.get(i).getCategory();
                data[2] = fileData.get(i).getCompanyName();
                data[3] = fileData.get(i).getFirstName();
                data[4] = fileData.get(i).getLastName();
                data[5] = fileData.get(i).getAddress();
                data[6] = fileData.get(i).getCity();
                data[7] = fileData.get(i).getState();
                data[8] = fileData.get(i).getPhoneNumber();
                data[9] = fileData.get(i).getEmailAddress();
                data[10] = fileData.get(i).getEmailSourceLink();
                data[11] = fileData.get(i).getWebsite();
                data[12] = fileData.get(i).getPro2URL();
                data[13] = fileData.get(i).getValid();
                data[14] = fileData.get(i).getNotes();
                model.addRow(data);
            }
    }


}
